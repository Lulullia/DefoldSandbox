function init(self)
	msg.post(".", "acquire_input_focus")

	local root = "main#root"
	local main = "main#co"

	local v = vmath.vector3()

	local springiness = 10.0
	local dampingRatio = 0.7

	-- Main joint connecting root and main
	--physics.create_joint(physics.JOINT_TYPE_FIXED, root, "root.main1", v, "main#co1", v)
	--physics.create_joint(physics.JOINT_TYPE_FIXED, root, "root.main7", v, "main#co7", v)

	-- Connect main with every other
	physics.create_joint(
	physics.JOINT_TYPE_WELD, 
	main, 
	"main.main1", v, 
	"main#co1", v,
	{ frequency = springiness, damping = dampingRatio })
	physics.create_joint(
	physics.JOINT_TYPE_WELD, 
	main, 
	"main.main2", v, 
	"main#co2", v,
	{ frequency = springiness, damping = dampingRatio })
	physics.create_joint(
	physics.JOINT_TYPE_WELD, 
	main, 
	"main.main3", v, 
	"main#co3", v,
	{ frequency = springiness, damping = dampingRatio })
	physics.create_joint(
	physics.JOINT_TYPE_WELD, 
	main, 
	"main.main4", v, 
	"main#co4", v,
	{ frequency = springiness, damping = dampingRatio })
	physics.create_joint(
	physics.JOINT_TYPE_WELD, 
	main, 
	"main.main5", v, 
	"main#co5", v,
	{ frequency = springiness, damping = dampingRatio })
	physics.create_joint(
	physics.JOINT_TYPE_WELD, 
	main, 
	"main.main6", v, 
	"main#co6", v,
	{ frequency = springiness, damping = dampingRatio })
	physics.create_joint(
	physics.JOINT_TYPE_WELD, 
	main, 
	"main.main7", v, 
	"main#co7", v,
	{ frequency = springiness, damping = dampingRatio })

	-- Connect vertices to each other
	physics.create_joint(
	physics.JOINT_TYPE_WELD, 
	"main#co1", 
	"main1.main7", v, 
	"main#co7", v,
	{ frequency = springiness, damping = dampingRatio })
	physics.create_joint(
	physics.JOINT_TYPE_WELD, 
	"main#co1", 
	"main1.main2", v, 
	"main#co2", v,
	{ frequency = springiness, damping = dampingRatio })
	physics.create_joint(
	physics.JOINT_TYPE_WELD, 
	"main#co2", 
	"main2.main3", v, 
	"main#co3", v,
	{ frequency = springiness, damping = dampingRatio })
	physics.create_joint(
	physics.JOINT_TYPE_WELD, 
	"main#co3", 
	"main3.main4", v, 
	"main#co4", v,
	{ frequency = springiness, damping = dampingRatio })
	physics.create_joint(
	physics.JOINT_TYPE_WELD, 
	"main#co4", 
	"main4.main5", v, 
	"main#co5", v,
	{ frequency = springiness, damping = dampingRatio })
	physics.create_joint(
	physics.JOINT_TYPE_WELD, 
	"main#co5", 
	"main5.main6", v, 
	"main#co6", v,
	{ frequency = springiness, damping = dampingRatio })
	physics.create_joint(
	physics.JOINT_TYPE_WELD, 
	"main#co6", 
	"main6.main7", v, 
	"main#co7", v,
	{ frequency = springiness, damping = dampingRatio })
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	local pos = vmath.vector3(action.x, action.y, 0)
	go.set_position(pos, "root#root")
end